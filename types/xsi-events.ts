/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/user/{user}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          user: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserSubscriptionRequest"];
        };
      };
      responses: {
        /** @description Subscription created for user */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UserSubscriptionResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/subscription/{subscription}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subscription: string;
      };
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          subscription: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Subscription info */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["SubscriptionResponse"];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          subscription: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["SubscriptionRefreshRequest"];
        };
      };
      responses: {
        /** @description Subscription refreshed */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["SubscriptionRefreshResponse"];
          };
        };
      };
    };
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          subscription: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Subscription deleted */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Subscription id not found */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              "@xmlns"?: components["schemas"]["StringProperty"];
              summary?: components["schemas"]["StringProperty"];
              summaryEnglish?: components["schemas"]["StringProperty"];
              errorCode?: components["schemas"]["StringProperty"];
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CallAnsweredEvent: {
      Event: {
        "@xsi1:type": string;
        "@xmlns": {
          xsi: string;
          xsi1: string;
        };
        eventID: components["schemas"]["StringProperty"];
        sequenceNumber: components["schemas"]["StringProperty"];
        userId: components["schemas"]["StringProperty"];
        externalApplicationId: components["schemas"]["StringProperty"];
        subscriptionId: components["schemas"]["StringProperty"];
        channelId?: components["schemas"]["StringProperty"];
        targetId: components["schemas"]["StringProperty"];
        httpContact: {
          uri: components["schemas"]["StringProperty"];
        };
        eventData: {
          "@xsi1:type": string;
          call?: components["schemas"]["CallObject"];
        };
      };
    };
    CallObject: {
      callId: components["schemas"]["StringProperty"];
      extTrackingId: components["schemas"]["StringProperty"];
      personality: {
        /** @enum {string} */
        $: "Click-To-Dial" | "Originator" | "Terminator";
      };
      state: {
        /** @enum {string} */
        $: "Active" | "Alerting" | "Detached" | "Held" | "Released" | "Remote Held";
      };
      remoteParty: {
        name: components["schemas"]["StringProperty"];
        address: components["schemas"]["CallAddress"];
        callType: components["schemas"]["StringProperty"];
      };
      endpoint: {
        "@xsi1:type": string;
        addressOfRecord: components["schemas"]["StringProperty"];
      };
      appearance: components["schemas"]["StringProperty"];
      startTime: components["schemas"]["StringProperty"];
      answerTime: components["schemas"]["StringProperty"];
      releaseTime?: components["schemas"]["StringProperty"];
      acdCallInfo?: {
        acdUserId: components["schemas"]["StringProperty"];
        acdName: components["schemas"]["StringProperty"];
        acdNumber: components["schemas"]["CallAddress"];
        numCallsInQueue: components["schemas"]["StringProperty"];
        waitTime: components["schemas"]["StringProperty"];
        callingPartyInfo: {
          address: components["schemas"]["CallAddress"];
          callType: components["schemas"]["StringProperty"];
        };
      };
      allowedRecordingControls?: components["schemas"]["StringProperty"];
    };
    CallAddress: {
      $: string;
      "@countryCode": string;
    };
    CallObjectArray: components["schemas"]["CallObject"][];
    CallSubscriptionEvent: {
      Event: {
        "@xsi1:type": string;
        "@xmlns": {
          xsi: string;
          xsi1: string;
        };
        eventID: components["schemas"]["StringProperty"];
        sequenceNumber: components["schemas"]["StringProperty"];
        userId: components["schemas"]["StringProperty"];
        externalApplicationId: components["schemas"]["StringProperty"];
        subscriptionId: components["schemas"]["StringProperty"];
        channelId?: components["schemas"]["StringProperty"];
        targetId: components["schemas"]["StringProperty"];
        eventData: {
          "@xsi1:type": string;
          hookStatus: components["schemas"]["StringProperty"];
          calls?: components["schemas"]["CallObject"] | components["schemas"]["CallObjectArray"];
        };
      };
    };
    SubscriptionTerminatedEvent: {
      Event: {
        "@xsi1:type": string;
        "@xmlns": {
          xsi: string;
          xsi1: string;
        };
        eventID: components["schemas"]["StringProperty"];
        sequenceNumber: components["schemas"]["StringProperty"];
        userId: components["schemas"]["StringProperty"];
        externalApplicationId: components["schemas"]["StringProperty"];
        subscriptionId: components["schemas"]["StringProperty"];
        httpContact: {
          uri: components["schemas"]["StringProperty"];
        };
        targetId?: components["schemas"]["StringProperty"];
        eventData: {
          "@xsi1:type": string;
        };
      };
    };
    SubscriptionResponse: {
      Subscription: {
        "@xmlns": components["schemas"]["StringProperty"];
        subscriptionId: components["schemas"]["StringProperty"];
        subscriberId: components["schemas"]["StringProperty"];
        targetIdType: components["schemas"]["StringProperty"];
        targetId: components["schemas"]["StringProperty"];
        event: components["schemas"]["StringProperty"];
        expires: components["schemas"]["StringProperty"];
        channelSetId?: components["schemas"]["StringProperty"];
        applicationId: components["schemas"]["StringProperty"];
      };
    };
    UserSubscriptionRequest: {
      Subscription: {
        "@xmlns": components["schemas"]["StringProperty"];
        subscriberId: components["schemas"]["StringProperty"];
        targetIdType: components["schemas"]["StringProperty"];
        targetId: components["schemas"]["StringProperty"];
        event: components["schemas"]["StringProperty"];
        expires: components["schemas"]["StringProperty"];
        httpContact: {
          uri: components["schemas"]["StringProperty"];
        };
        applicationId: components["schemas"]["StringProperty"];
      };
    };
    SubscriptionRefreshRequest: {
      Subscription: {
        "@xmlns": components["schemas"]["StringProperty"];
        expires: components["schemas"]["StringProperty"];
      };
    };
    SubscriptionRefreshResponse: {
      Subscription: {
        "@xmlns": components["schemas"]["StringProperty"];
        subscriptionId: components["schemas"]["StringProperty"];
        expires: components["schemas"]["StringProperty"];
      };
    };
    UserSubscriptionResponse: {
      Subscription: {
        "@xmlns": {
          $: string;
        };
        subscriptionId: components["schemas"]["StringProperty"];
        expires: components["schemas"]["StringProperty"];
      };
    };
    StringProperty: {
      $: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;
export type operations = Record<string, never>;
